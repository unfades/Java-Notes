file handling, classes and methods used in file handling
========================================================

import java.io.*;
public class Lecture59FileIO{
    public static void main(String[] args){
        File myfile = new File("D:/File/TestWord.docx");
        if(myfile.exists()){
            System.out.println(myfile.getName() + " is present.");
        }else{
            System.out.println("File is not present");
            System.exit(0);
        }

        if(myfile.isFile()){
            System.out.println(myfile.getName() + " is a file" + " and its size is " + myfile.length());
        }else{
            System.out.println(myfile.getName() + " is a directory");
        }

        if(myfile.isHidden()){
            System.out.println(myfile.getName() + " is hidden!");
        }else{
            System.out.println(myfile.getName()  + " is not hidden...");
        }

        if(myfile.canWrite()){
            System.out.println(myfile.getName() + " allows writing");
        }else{
            System.out.println(myfile.getName() + " doesnt allow writing");
        }
    }
}


Methods of File class:

1. public boolean exists();
2. public String getName();
3. public boolean isFile();
4. public boolean isDirectory();
5. public boolean isHidden();
6. public boolean canWrite();

exists() makes sure the file exists before you start your manipulations/operations


getName() returns file name

isFile() tells us if its a file or directory
true for file, false for directory

same for isDirectory() but the opposite
true for directory, false for file 

isHidden() tells us if the file is hidden or not

isHidden() true if it is hidden, if it isn't hidden then false

canWrite() false if the file is read only and true if it is able to be written to.

More methods learned today:

7. public boolean delete()

8. public long length()

9. public long lastModified()

10. public boolean mkdir()

11. public boolean mkdirs()

12. pubic String[] list()


7. delete() will delete the file permanently
and even the folder only if the folder has no other files inside
and if the file to be deleted is also closed and not open.

8. will tell you the file size in bytes precisely

import java.io.*;

public class Lecture59Part2 {
    public static void main(String[] args) {
        //go create this file in the directory if it is not there already first for it to work
        File myfile = new File("D:/File/mysecrets.txt");
        System.out.println(myfile.getName() + " exists?: " + myfile.exists());        
        System.out.println(myfile.getName() + " size in bytes is: " + myfile.length() + " bytes");
        System.out.println(myfile.getName() + "is deleted?: " + myfile.delete());
        System.out.println(myfile.getName() + " exists now after deletion?: " + myfile.exists());
    }
}

9. public long lastModified()

this tells us the last time the file was modified.
windows properties tells you as well, so this method works just like that.

lastModified is gonna give you that date. But the return type is long, 
so how is date and time gonna come into long?

it is going to be told in milliseconds,
it starts counting at 
1st jan 1970 12am time in milliseconds
and subtracts that by the current date of today in milliseconds
and returns the value of the difference to us also in milliseconds

1st Jan 1970 12:00 AM is the epoch date.

epoch means the day something specail was done 

The first server of unix operating system was launched at this date.

if the file was modified before 1970 then the answer will be in negative values
of milliseconds

the answer is not going to be understood by us logically, 

so we have to convert it to date from milliseconds, by using the Date class.

Date class has 2 constructors, 

Date d = new Date(); //puts the current date and time in there.

Date d1 = new Date(num); //then the number in milliseconds is converted into the date and time conversion for our
date and time

import java.io.*;
import java.util.Date;

public class Lecture59Part3 {
    public static void main(String[] args) {
        //go create this file in the directory if it is not there already first for it to work
        File myfile = new File("D:/File/mysecrets.txt");
        System.out.println(myfile.getName() + " exists?: " + myfile.exists());        
        System.out.println(myfile.getName() + " was last modified " + myfile.lastModified());
        Date d = new Date(myfile.lastModified());
        System.out.println("the above time is: " + d);
    }
}

10. mkdir() and mkdirs()

these make directories

and the difference between them is:

File f = new File("D:/Bhopal/sca");
//not there then we can do f.mkdir();

it will only happen when the previous path is there,
meaning if bhopal is not there it wont make it,
//a folder in the pre existing path will be made alone.

f.mkdirs() 

//this will make all the folders that are not already there in the path.
//folders within folders that did not exist.

import java.io.File;

public class Lecture59Part4 {
    public static void main(String[] args) {
        //initially all false since nothing is there,
        //then after replacing mkdir with mkdirs() then false, true true, cause the paths will be made
        //if not already present for the folder
        File f = new File("D:\\File\\City\\Address");
        System.out.println(f.getName() + " exists?: " + f.exists());
        System.out.println(f.getName() + " gotcreated?: " + f.mkdirs());
        System.out.println(f.getName() + " exists?: " + f.exists());
    }
}

12. public String[] list()

list() 

gives us the name list of all files and directories within a folder


import java.io.File;

public class Lecture59Part5 {
    public static void main(String[] args) {
        File f = new File("D:\\File");
        String[] arr = f.list();
        System.out.println("total members: " + arr.length);
        for(String i: arr){
            System.out.println(i);
        }
        
    }
}

Reading files
=============

READING TEXT FILES 

The "Reader" class

Methods:

1. public int read() throws IOException

when you call read it returns the unicode of current character of the file
then it moves to the next char,
when it reaches the end of the file, then it returns -1.

throws IOException is there at the end of this, it means it is a checked exception,
that means you MUST handle it using try-catch. or else we will have to write throws at main method.

2. public int read(char[]) throws IOException

this read(char[]) takes in multiple characters at once in the form of an array.
this read will check how much the file size is and the array size is.
the smallest size will be read and return the count of that.

we need to make that array.
ex:
if the file size is 6, and the array is 3 sized.
char[] arr = new char[3];

it will read the smallest size the file or the array, and after it will return the count of that.

So here it will return 3, since file characters are 6.

if arr size is 10, and characters in the file are 4, then it will return 4.

3. public int read(char[], int off, int len) throws IOException

in this if you want to read some of the array and not all of it then you can with this.

int off is the start, and int len is the number of characters you want to read.

char[] arr = new char[5];

arr[0] = 'A';
arr[1] = 'B';
f.read(arr);

file contained BHOPAL

so it will be overwritten in it.

If you don'twant that then

you can do
for storing some into it.


char[] arr = new char[5];

arr[0] = 'A';
arr[1] = 'B';
f.read(arr,2,3);

it becomes ABBHO

Meaning 0th gets A, 1 gets B, then the rest get BHO from Bhopal
This is the third version of the read method.

for the reads that is why they return int, if the file is bigger than the array read it will just
return the amount read, and if the array is bigger than the file it only returns the amount read.

4. public boolean ready() throws IOException

ready sees if there is any character left that's capable of being read in the file.
if there is anything left to read then it will return true, otherwise false.
it does not move the pointer from current character to the next character.

5. public void close() throws IOException

close() method closes the file. Yes it is important to close the file.

file is an important resource and if left open it will be vulnerable to attacks.
to save us from the attacks. close() can save us.



6. public void reset() throws IOException

reset takes the file pointer back to the beginning of the file.


Challenge HOMEWORK:

Everything of Java will be revised here except collections.

In telegram it will be a file called About Java.txt

You need to make a program that reads the file called About Java,

and then you will have to makea  program that reads the file and then also
tells us how many characters are present in that file.

AboutJava.txt

contains text - 

Java is a high-level programming language
originally developed by Sun Microsystems
and released in 1996. Java runs on a variety
of platforms, such as Windows, Mac OS, and
the various versions of UNIX.

program reads it, after reading displays it,
then it shows how many characters are present in it.

Reader cannot have objects made.

You must use children of Reader to make Objects.

You will use FileReader in order to do this.

The FileReader class has a constructor that will open the file.

File must be opened before it is read.

FileReader constructor will open the file. The String is the path of the File in the constructor.


FileReader fr = new FileReader("C:/AboutJava.txt");