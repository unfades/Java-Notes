CUSTOM ARRAYLIST, IMPORTANT POINTS RELATED TO ARRAYLIST
=======================================================

Introduction to Custom ArrayList.

What is a Custom ArrayList?

If you store your own Class's Objects inside an ArrayList,
then it is a Custom ArrayList.

A Custom ArrayList i an ArrayList which can hold objects of programmer defined classes.

For example, suppose we have a class called Emo and we want to store Emp objects in the ArrayList.

Syntax:

ArrayList<nameofourclass> refName = new ArrayList<>();

if our class name is Emp then the ArrayList will be:

ArrayList<Emp> empList = new ArrayList<>();


Exercise 4:

Create a class called Emp with following instance members:

1. age

2. name

3. sal

Provide appropriate constructor to intialize Emp object.
Then create a driver class called UseEmp which maintains a list
of Employees. Now do the following operations on this list:

1. Add 4 Emp objects.

2. Display Emp Records.

3. Remove an Emp Object from the List.

4. Sort the List based on Income least to Most.
5. Sort the List based on Income Most to least.
6. Sort the List based on Name of Employee ascending.
7. Sort the List based on Name of Employee descending.
8. Sort the List based on Age of Employees ascending.


PRO TIP WHen sorting an ArrayList NOTE TO SELF
Add FIRST Remove LATER. When Swapping.

import java.util.ArrayList;
import java.util.Scanner;


public class Emp50{

    int age;
    String name;
    int sal;
    
    public Emp50(int age, String name, int sal){
        this.age = age;
        this.name = name;
        this.sal = sal;
    }

    public void setSal(int sal){
        this.sal = sal;
    }

    public void setAge(int age){
        this.age = age;
    }

    public void setName(String name){
        this.name = name;
    }

    public void show(){
        System.out.println("Age = " + this.age + " Name = " + this.name + " Salary = " + this.sal);
    }

    public String toString(){
        return "[ Age = " + this.age + " Name = " + this.name + " Salary = " + this.sal +"]";
    }

    public int get(){
        return this.sal;
    }

    public String getName(){
        return this.name;
    }

    public int getAge(){
        return this.age;
    }

}

class UseEmp50{
    public static void main(String[] args){

        ArrayList<Emp50> employees = new ArrayList<>();
        System.out.println("\n");
        System.out.println("program start");
        Emp50 Hav = new Emp50(22, "Hav", 1000_000);
        employees.add(Hav);
        Emp50 Ayuj = new Emp50(29, "Ayuj", 95_000);
        employees.add(Ayuj);
        Emp50 Abadon = new Emp50(35, "Abadon", 100_000);
        employees.add(Abadon);
        Emp50 Owen = new Emp50(24, "Owen", 90_000);
        employees.add(Owen);
        
        //show employees
        for(Emp50 i: employees){
            i.show();
        }

        System.out.println("\n\n\n");

        /* 
        System.out.println("Before removing Abadon");
        System.out.println(employees);
        //remove one
        employees.remove(2);
        System.out.println("After removing Abadon");
        System.out.println(employees);
        */
        //ASK FROM THE USER WHO TO REMOVE:

        System.out.println("User, tell me who to remove from the List: ");
        for(Emp50 i: employees){
            i.show();
        }

        Scanner sc = new Scanner(System.in);
        System.out.println("Enter the User's Name, Age, Sal to Remove(ex: Hav 22 100000): ");
        String rem = sc.next();
        int age = sc.nextInt();
        int sal = sc.nextInt();

        for(int i = 0; i<employees.size(); i++){
            if(employees.get(i).get() == sal && employees.get(i).getName().equals(rem) && employees.get(i).getAge() == age){
                System.out.println("Found employee " + rem + " at " + i);
                employees.remove(i);
                System.out.println(employees);
                break;
            }
        }

        System.out.println("\n\n\n");
        
        System.out.println("Sorting the list based on Income Ascending");
        
        for(int i = 0; i<employees.size(); i++){
            for(int j = 0; j<employees.size(); j++){
                if(i==j) continue;
                if(employees.get(i).get()<employees.get(j).get()){
                    System.out.println("At i is "+ i+": ");
                    Emp50 temp = new Emp50(0,"s",0);
                    temp = employees.get(i);
                    //SOMETIMES IT IS MORE SIMPLE THAN YOU EVER REALIZE
                    //ADD FIRST, REMOVE LATER, SKIPPING THE HASSLE OF 
                    //REMOVING FIRST, ADDING LATER.
                    employees.add(i,employees.get(j));
                    employees.remove(i+1);
                    employees.add(j,temp);
                    employees.remove(j+1);
                    
                }
            }
        }
        System.out.println(employees);
        
    }
}


RULES TO REMEMBER:

1. If we are adding objects of our class in an ArrayList or any Collection. Then we MUST 
override the toString() method. This is because when we pass ArrayList object to SOP() then
Java calls toString() method of the ArrayList and the toString() method of ArrayList internally
calls the toString method of the object that is added in the ArrayList.

in the above program, there are 5 toString() called. 1 for the arrayList and internally 4 for
the Custom Objects we made.

Otherwise you get className@hashcode in your code where you didn't implement toString()


SIR's IMPLEMENTATION:


public class Emp50{

    int age;
    String name;
    int sal;
    
    public Emp50(int age, String name, int sal){
        this.age = age;
        this.name = name;
        this.sal = sal;
    }

    public void setSal(int sal){
        this.sal = sal;
    }

    public void setAge(int age){
        this.age = age;
    }

    public void setName(String name){
        this.name = name;
    }

    public void show(){
        System.out.println("Age = " + this.age + " Name = " + this.name + " Salary = " + this.sal);
    }

    public String toString(){
        return "[ Age = " + this.age + " Name = " + this.name + " Salary = " + this.sal +"]";
    }

    public int get(){
        return this.sal;
    }

    public String getName(){
        return this.name;
    }

    public int getAge(){
        return this.age;
    }

}

class UseEmp50{
    public static void main(String[] args){

        ArrayList<Emp50> employees = new ArrayList<>();
        System.out.println("\n");
        System.out.println("program start");
        Emp50 Hav = new Emp50(22, "Hav", 1000_000);
        employees.add(Hav);
        Emp50 Ayuj = new Emp50(29, "Ayuj", 95_000);
        employees.add(Ayuj);
        Emp50 Abadon = new Emp50(35, "Abadon", 100_000);
        employees.add(Abadon);
        Emp50 Owen = new Emp50(24, "Owen", 90_000);
        employees.add(Owen);
        
        //show employees
        for(Emp50 i: employees){
            i.show();
        }

        System.out.println("\n\n\n");

        /* 
        System.out.println("Before removing Abadon");
        System.out.println(employees);
        //remove one
        employees.remove(2);
        System.out.println("After removing Abadon");
        System.out.println(employees);
        */
        //ASK FROM THE USER WHO TO REMOVE:

        System.out.println("User, tell me who to remove from the List: ");
        for(Emp50 i: employees){
            i.show();
        }

        Scanner sc = new Scanner(System.in);
        System.out.println("Enter the User's Name, Age, Sal to Remove(ex: Hav 22 100000): ");
        String rem = sc.next();
        int age = sc.nextInt();
        int sal = sc.nextInt();

        //SIRS EXPLANATION FOR REMOVAL, THIS DID NOT WORK, WHY?
        //BECAUSE EACH CLASS IN JAVA HAS AN EQUALS METHOD, AND IT HAS TO GET OVERRIDDEN.

        Emp50 f = new Emp(22, Hav, 1000000);
        System.out.println("Empwasremoved?: " + employees.remove(f)); //false is the outcome
        System.out.println("\n\n\n");
        
        System.out.println("After removing: ");
        
        System.out.println(employees);
        
    }
}

EQUALS IS A METHOD OF THE CLASS OBJECT. EVERY CLASS IN JAVA HAS AN EQUALS METHOD THEN.

EQUALS METHOD COMPARES THE ADDRESSES OF OBJECTS.

f object is not gonna match ANY Address of our objects. THis means that the employee to remove
was not found.

If we want remove to work proper, then we should override the equals() method in our class as well.
THen fix the program.

ex: 

class Box{
    private int length, int breadth, int height;

    Box(int length, int breadth, int height){
        this.length = length;
        this.breadth = breadth;
        this.height = height;
    }

    public String toString(){
        return "Box{" + "length="+this.length + "breadth="+this.breadth + "height="+this.height;
    }

    public boolean equals(Object o){
        if(this.length == o.length && this.breadth == o.breadth && this.height == o.height) return true;
        return false;
    }
}

public class UseBox{
    public static void main(String args){
        Box b1 = new Box(10,20,30);
        Box b2 = new Box(10,20,30);

        //LOGICALLY b1 and b2 are the same
        //However their addresses are different

        System.out.println(b1);
        System.out.println(b2);
        //equals from Object class.
        //false, this is not what we want. We wanna compare content not addresses.
        //System.out.println(b1.equals(b2));

        //We are overriding equals now.
        System.out.println(b1.equals(b2));

    }
}

//now we know 3 methods of Object class,

finalize(), toString() and now equals()

Object class has 11 methods. We should know the ones we have learned.

class Box50{
    private int length, breadth, height;

    Box50(int length, int breadth, int height){
        this.length = length;
        this.breadth = breadth;
        this.height = height;
    }

    public String toString(){
        return "Box50{" + "length="+this.length + "breadth="+this.breadth + "height="+this.height;
    }
    
    @Override 
    public boolean equals(Object o){
        Box50 temp = (Box50)o;
        if(this.length == temp.length && this.breadth == temp.breadth && this.height == temp.height){
            return true;
        }
        return false;
    }

    @Override  //NOW IT IS GIVING ERROR AS IT IS NOT PROPER OVERRIDING
    public boolean equals(Box50 o){
        if(this.length == o.length && this.breadth == o.breadth && this.height == o.height) return true;
        return false;
    }
}

public class UseBox50{
    public static void main(String[] args){
        Box50 b1 = new Box50(10,20,30);
        Box50 b2 = new Box50(10,20,30);

        //LOGICALLY b1 and b2 are the same
        //However their addresses are different

        System.out.println(b1);
        System.out.println(b2);
        //equals from Object class.
        //false, this is not what we want. We wanna compare content not addresses.
        //System.out.println(b1.equals(b2));

        //We are overriding equals now.
        System.out.println(b1.equals(b2));

    }
}

In our ArrayList, there are 3 methods that work based on equals.

1. remove() 2. contains() 3. indexOf() 

We will not get the object in the ArrayList because it works on Equals based on
the criteria.

import java.util.ArrayList;
import java.util.Scanner;


public class Emp50{

    int age;
    String name;
    int sal;
    
    public Emp50(int age, String name, int sal){
        this.age = age;
        this.name = name;
        this.sal = sal;
    }

    public void setSal(int sal){
        this.sal = sal;
    }

    public void setAge(int age){
        this.age = age;
    }

    public void setName(String name){
        this.name = name;
    }

    public void show(){
        System.out.println("Age = " + this.age + " Name = " + this.name + " Salary = " + this.sal);
    }

    public String toString(){
        return "[ Age = " + this.age + " Name = " + this.name + " Salary = " + this.sal +"]";
    }

    public int get(){
        return this.sal;
    }

    public String getName(){
        return this.name;
    }

    public int getAge(){
        return this.age;
    }

    @Override 
    public boolean equals(Object o){
        Box50 temp = (Box)o;
        if(this.length == temp.length && this.breadth == temp.breadth && this.height == temp.height){
            return true;
        }
        return false;
    }
}

class UseEmp50{
    public static void main(String[] args){

        ArrayList<Emp50> employees = new ArrayList<>();
        System.out.println("\n");
        System.out.println("program start");
        Emp50 Hav = new Emp50(22, "Hav", 1000_000);
        employees.add(Hav);
        Emp50 Ayuj = new Emp50(29, "Ayuj", 95_000);
        employees.add(Ayuj);
        Emp50 Abadon = new Emp50(35, "Abadon", 100_000);
        employees.add(Abadon);
        Emp50 Owen = new Emp50(24, "Owen", 90_000);
        employees.add(Owen);
        
        //show employees
        for(Emp50 i: employees){
            i.show();
        }

        System.out.println("\n\n\n");

        //ASK FROM THE USER WHO TO REMOVE:

        System.out.println("User, tell me who to remove from the List: ");
        for(Emp50 i: employees){
            i.show();
        }

        Scanner sc = new Scanner(System.in);
        System.out.println("Enter the User's Name, Age, Sal to Remove(ex: Hav 22 100000): ");
        String rem = sc.next();
        int age = sc.nextInt();
        int sal = sc.nextInt();

        Emp50 gone = new Emp(age, rem, sal);
        
        System.out.println(employees.contains(gone)); //true
        System.out.println(employees.remove(gone)); //true
        System.out.println(employees.indexOf(gone)); // true
        
    }
}

IMPORTANT RULE 

2. If we are adding Objects of our class in an ArrayList, then we must also Override equals() method.
Otherwise the operations in the ArrayList will fail that work on the basis of equals() and will 
fail because they compared addresses. 

contains(), indexOf() and remove() will fail without Overriding equals.

So override equals.

This is because all these 3 methods internally call the equals method of the object added in the 
ArrayList and if we have not overridden equals in our class then Java further calls equals method of
the Object class, and the equals method of the Object class always compares addresses of the objects
and not their data.

NOW to Sort the ArrayList, there is no sort() method in ArrayLists.


import java.util.ArrayList;
import java.util.Collections;

public class Lecture50ArrayListSort{
    public static void main(String[] args){
        ArrayList<Integer> marks = new ArrayList<>();
        marks.add(50);
        marks.add(25);
        marks.add(70);
        marks.add(90);
        marks.add(15);

        Collections.sort(marks);
        System.out.println(marks);
    }
}


ex2:

import java.util.ArrayList;
import java.util.Collections;

public class Lecture50ArrayListStringsSort{
    public static void main(String[] args){
        ArrayList<String> months = new ArrayList<>();
        months.add("Jan");
        months.add("Feb");
        months.add("Mar");
        months.add("Apr");
        months.add("May");

        Collections.sort(months);
        System.out.println(months);
    }
}


So... On the basis of Collections.sort() method that is the parent of List and ArrayList
it should work so why does it not work...

class UseEmp50{
    public static void main(String[] args){

        ArrayList<Emp50> employees = new ArrayList<>();
        System.out.println("\n");
        System.out.println("program start");
        Emp50 Hav = new Emp50(22, "Hav", 1000_000);
        employees.add(Hav);
        Emp50 Ayuj = new Emp50(29, "Ayuj", 95_000);
        employees.add(Ayuj);
        Emp50 Abadon = new Emp50(35, "Abadon", 100_000);
        employees.add(Abadon);
        Emp50 Owen = new Emp50(24, "Owen", 90_000);
        employees.add(Owen);
        
        System.out.println("Before Sorting: ");
        for(Emp50 i: employees){
            i.show();
        }

        Collectons.sort(employees) // WHY DOES THIS GIVE ERROR AND HOW TO REMOVE IT?

        System.out.println("After Sorting: ");
        for(Emp50 i: employees){
            i.show();
        }
    }
}

CONTINUED:


import java.util.ArrayList;
import java.util.Scanner;
import java.util.Collections;
import java.util.Objects;

class Emp51 implements Comparable<Object>{

    int age;
    String name;
    int sal;

    @Override
    public int hashCode(){
        int hash = 3;
        return hash;
    }

    
    @Override
    public boolean equals(Object obj){
        if(this == obj) return true;
        if(obj == null) return false;
        
        if(getClass()!=obj.getClass()) return false;
        final Emp51 other = (Emp51)obj;
        if(this.age!=other.age) return false;
        if(Double.doubleToLongBits(this.sal)!=Double.doubleToLongBits(other.sal)) return false;
        if(!Objects.equals(this.name, other.name)) return false;
        return true;
    }

    public Emp51(int age, String name, int sal){
        this.age = age;
        this.name = name;
        this.sal = sal;
    }

    public void setSal(int sal){
        this.sal = sal;
    }

    public void setAge(int age){
        this.age = age;
    }

    public void setName(String name){
        this.name = name;
    }

    public void show(){
        System.out.println("Age = " + this.age + " Name = " + this.name + " Salary = " + this.sal);
    }

    @Override
    public String toString(){
        return "[ Age = " + this.age + " Name = " + this.name + " Salary = " + this.sal +"]";
    }

    public int get(){
        return this.sal;
    }

    public String getName(){
        return this.name;
    }

    public int getAge(){
        return this.age;
    }

    @Override
    //o cannot access as parent reference cannot access child methods
    public int compareTo(Object t){
        Emp51 temp = (Emp51)t;
        //sort in Collections.sort says if it gets 1 then it will Swapping
        //if sort gets -1 or 0, then it will not Swap
        //this is compareTo()'s inner works, if pos, then swap, else do not swap
        if(this.age>temp.age){
            return -1;
        }else if(temp.age>this.age){
            return 1;
        }else{
            if(this.sal>temp.sal){
                return 1;
            }else if(temp.sal>this.sal){
                return -1;
            }else{
                return 0;
            }
        }
        //You can do all that in a one liner
        //But you gotta make the primitives declared and redeclare as Objects.
        //ex int to Integer, double to Double as seen above in the instance variables of the class.
        //AS WE ARE CALLING THE PREDEFINED COMPARETO in the Wrapper classes.
        //int result = this.age.compareTo(temp.age); return result;
    }

}

public class UseEmp51{
    public static void main(String[] args){

        ArrayList<Emp51> employees = new ArrayList<>();
        System.out.println("\n");
        System.out.println("program start");
        Emp51 Hav = new Emp51(22, "Hav", 1000_000);
        employees.add(Hav);
        Emp51 Ayuj = new Emp51(22, "Ayuj", 95_000);
        employees.add(Ayuj);
        Emp51 Abadon = new Emp51(35, "Abadon", 100_000);
        employees.add(Abadon);
        Emp51 Owen = new Emp51(24, "Owen", 90_000);
        employees.add(Owen);
        
        System.out.println("Before Sorting: ");
        for(Emp51 i: employees){
            i.show();
        }

        Collections.sort(employees); // WHY DOES THIS GIVE ERROR AND HOW TO REMOVE IT?

        System.out.println("After Sorting: ");
        for(Emp51 i: employees){
            i.show();
        }
    }
}

The new rule we learned is that

3. If we are adding objects of our own class in an ArrayList, and we wanna sort the ArrayList on the 
basis of some data member of our object using the method Collections.sort() then:

a. we must implement the interface Comparable in our class. It is from java.lang.
b. this interface has an abstract method called compareTo()
c. So we must override this method in our class.
d. Because when we call Collections.sort() then it internally calls compareTo() inside it.

Similar to how contains,remove,indexOf calls equals()

e. While overriding compareTo() we must remember that it must return >0 or <0 or 0.

f. If compareTo() returns pos then method sort() swaps the calling object and the object passed as arg.
g. If compareTo() returns neg or zero then no swapping will happen.

