import java.util.Scanner;

class ArrayDemo1{
    public static void main(String[] args){
        int n;
        Scanner sc = new Scanner(System.in);
        System.out.println("Enter size: ");
        n = sc.next();
        int [] arr = new int[n];

        for(int i = 0; i<= n-1; i++){
            System.out.println("Enter no: );
            arr[i] = sc.nextInt();
        }
        int sum = 0;
        System.out.println("You inputted: ");
        for(int i = 0; i<=n-1; i++){
            System.out.println(arr[i]);
            sum = sum+arr[i];
        }
        System.out.println("Sum is " + sum);
        System.out.println("Average is " +(float)sum/n);
    }
}

In C: Garbage collections
allocation using malloc()
deallocate using free()

In C++:
    Dynamic Memory Alloc: new
    Deallocated with: delete

In Java:
    Dynamic Memory Alloc: new
    Deletion? How?

How Java Handles Deallocation of Dynamic Blocks
==============================================
2 Important vocabularies:
Before we can understand how Java handles deallocation of dynamic blocks,
we must first understand 2 very important terminologies:
1.Garbage block 
2.Garbage collector

There are no garbage values in JAVA, nor in modern languages in the world.
Not even in SQL, Python, C#, etc.

But there IS A GARBAGE BLOCK, IT IS NOT THE SAME AS GARBAGE VALUES.


GARBAGE BLOCK
======================
int [] arr = new int[5];

//this makes a reference arr and points to the array made in the HEAP with size 5
//allocates elements 012345
The array is pointing to the array object. 
It is called a dynamic block. The array object is a DYNAMIC BLOCK.

and then...
wrote
arr = new int[10];
now the array reference arr points to a new object of the HEAP
makes another array with other addresses than the previous,
arr now points to the new array new int[10] in the HEAP
NOW the new block is a DYNAMIC BLOCK the block new int[10] is DYNAMIC BLOCK
And the old block that was pointed to that was new int[5] is now a GARBAGE BLOCK
That is abandoned.
They are orphaned.

...
In java if we do not have any reference pointing to a DYNAMIC BLOCK (object,array)
then such dynamic blocks are better known as GARBAGE BLOCK.

IN simple terms if a dynamic block has no reference pointing to it, then it becomes
GARBAGE BLOCK.

GARBAGE collector
===================
1. In Java, under the JVM there is a special software called the GARBAGE COLLECTOR.
IT IS NOR IN JRE NOR JDK, its inside the JVM specifically.

2. As the name says, it runs periodically and identifies GARBAGE BLOCKs in our heap area.
From time to time.

3. Once it identifies these GARBAGE BLOCKS, then it removes them from HEAP AREA and sends them from the HEAP area 
and sends them to the FREE POOL, so that these GARBAGE BLOCKS can be reutilized.

GARBAGE BLOCKS ARE LIKE TRASH AND THE GARBAGE COLLECTOR COLLECTS them
THEN THROWS THEM to the FREE POOL and THEN THEY ARE FREE TO BE USED AGAIN AS HEAP MEMORY 
THIS IS TOTALLY AUTOMATIC 

4. The most important point to understand is that all this activity is carried out by the JVM without
puttin it in the knowledge of the programmer.

5. But another point to rememebr is that the JVM send the GARBAGE COLLECTOR lazily not hastily.
Whenever the JVM wants memory, whenever it feels like it, then the JVM sends the garbage collector.
The programmer will never know when the GARBAGE COLLECTOR did this.
GARBAGE COLLECTOR is LAZY not fast.
Reason: JAVA does not want to disturb us. 
Because if JAVA ran Garbage Collector often, then our programs would become slower.

JVM does it only when JVM feels the memory is going below threshold value.
Only when the limit of the memory is near reached in the HEAP.
So the GC will be used and will FREE those GARBAGE BLOCKS.

Java and Python manage memory, C/C++ do not.
in C/C++ it is the programmers job.
in Python/Java, it's the JVM/PVM's garbage collectors job.
In python the garbage collector is most active, called immediately, the waiter is active.
And in Java, sometimes whenever the tables are too full the waiter cleans them..
because the JVM is lazy.
In C/C++, its important for the customer to clean their own plates(programs).
This is why pythons management of memory is better than java.

INITIALIZING AN ARRAY
=====================

1.
int [] months = new int[12];

months[0] = 31;
months[1] = 28;
months[2] = 31;
.....
months[11] = 31;

2.
//either give the initializer, or give the size.
//gotta give 1 of them, size, or initializer.
//not both
//either 1 or the other

int [] months = new int[ ] {21,28,21,30,31,...,31};
or
int [] months = new int[12];

3. If initializers are being provided while declaring array reference.
then mentioning new is also optional.

int [] arr = {1,2,3,4};

//MUST USE NEW IF declaring or initializing seperately or else ERROR.
4.
int [] arr;
arr = {1,2,3,4}; ERRROR!

5. 
int [] arr;
arr = new int[] {1,2,3,4}; //Valid

examples of ways to initialize:
1. good for short size arrays.

int [] arr = new int[2];
arr[0] = 10;
arr[1] = 20;

2.
int [] arr {10,20,30,40,50,60}; //compiler automatically put new here
for(int i: n){
    System.out.println(i);
}

3.
Illegal Start Of Expression
int [] arr;
arr = {10,20,30,40,50,60}; //can't do this in seperate line, must ad new.
for(int i: n){
    System.out.println(i);
}

int [] arr = new int[] {10,20,30,40,50,60}; //works as syntax
    System.out.println(i);
}

In Java, Arrays are objects. And each object has a class. Every class has data members, member functions.

In the Array class there is an important property called "length"
In String it had a method length()
in java there is a length method and length property.
This is a property, so no parenthesis

int [] arr = {10,7,11,56,21,72,12,18,21,14,23};
//Java says this is stupid.
//You can use the special property called "length"
//length is a PUBLIC property
// THIS IS WHY WE CAN ACCESS IT OUTSIDE THE ARRAY CLASS

for(int i = 0; i<11; i++){
    System.out.println(arr[i]);
}

int arr = new int[100];
System.out.println(arr.length); //prints 100

length is constant in java, const. In java, it's not const. it's final.
It means it cannot be changed.
length is final. cannot assign value to final property.
we can only access and use length, cannot change that it is final.

1.In java arrays are objects so they have a special data member(property) called "length". This
property returns the size of the ARRAY.

SYNTAX:

<arrayref>.length ----> No parenthesis, because it is not a method.
length is a read only property. in Java it's final. FINAL keyword. cannot be changed.

better way to write above code is:

for(int i = 0; i<arr.length; i++){
    System.out.println(arr[i]);
}

