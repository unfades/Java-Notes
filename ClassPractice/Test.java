//best practices

/*
Program and class name do not need to be the same, but it is
recommended to do so. Why?
the program name of class which holds public static void main should be that.
the main class not Main{ } but any class that holds psvm.
Extension of our code MUST always be ,.java or it wont compile wont run even.
Recommended that the name of the program should be the same as the name of the main class, that is the class
which holds psvm.
So in our source code file we will keep the name as Test.java

How do we compile a program in java?

Javac does it.
javac <Full name of the program>

javac Test.java

What happens when we compile a program in java?

byteCode is made in a seperate file generated by the compiler. not for people or computer, for the JVM.
the byteCode file extension is .class and the name of the file is the name of the class we made.
class Test{} means the byteCode file is Test.class
however many classes in our program, the compiler makes that many bytecode files straight up with the .class extension
for our classes, the predefined classes already have their bytecode generated before we started writing programs.

1. When we compile a program in java the compiler generates bytecode files. 
2.bytecode files == no. of classes programmer made.
3.the name of the .class byteCode files is ALWAYS same as the name of the classes defined by the programmer.

For example we made  classes in the program
College 
Faculty
Student

Then  byteCode files are generated and named as 
College.class
Faculty.class
Student.class

thats why the byteCode class made Test.class when we made the Test class in our program.

Step 3 executing the code, the command is java

Sytax is java <Name of the Main class> means the class that has main() method.
example: java Test


So if I made the source code as Bhopal.java and had Class test inside it then I would need to write
java Test still to run Bhopal.java's code.

Compile it with javac Bhopal.java
and Run it with java Test

This is confusing to remember the class name so its better to keep the names Bhopal.java and class Bhopal so its java Bhopal right..

1 name to compile 1 name to run simple.
Can we keep name of Program and main class name differen?
Yes it is allowed but its not recommmended, we will have to remember 2 names.
instead of 1 name

*/

//user defined class use syntax PascalCase
class Test{ //class body
	//predefined Java class String
	//public is an access modifier
	//static is a non access modifier
	// void is a return type
	//unless using public can't use main because JVM is outside the class Test...
	//main has to be public.
	// if you made main not public program compiles but doesnt execute, because the JVM can't access it.
	//har hal may main has to be public always.
	//in order to execute and call main, main has to be public for that in Java.
	//if no static before main then code compiles but isnt called because JVM can call it without making an object of it.
	//JVM will not make an object of main it will need to be static for it to be called. public and static are needed.
	//you can also write static public
	//if you remove void then you will get an error because methods in java require return types.
	//The JVM has main as void in order to make it return nothing because the OS should get returned nothing, according to the JVM. It compiles but it doesn't run.
	//it needs to be void. It compiles but does not run.
	//main is not a function in java, functions are defined outside classes like in C/C++ they have methods and functions. 
	//methods are inside classes.
	//from now on you call them methods. in java its methods, inside the class its the main method.
	//Now for String[] args.
	//code compiles when removed String[] args but not run because JVM does not understand since its got no arguments.
	//String [] is for arrays, its a String array.
	//in Java, its int arr[] or int[] arr also valid.
	//in here you can change the name of args. You can also write String args[] thats whyyyyy
	//Must type String[] args or the program wont run it will compile but not run, its Javas zid.
	//How many valid prototypes in Java?
	/*
	4 +1.
	1. public static void main(String[] args) // best and recommended by Java they appreciate this.
	2. static public void main(String[] args) //OK
	3. public static void main(String args[]) //OK
	4. static public void main(String args[]) // OK
	5. public static void main(String... args) // New style of main(), introduced in Java 5 called a variable length argument. Varargs.
	/*
	//This is a commandline argument, its used for help when taking inputs.
	//
	public static void main(String[] args){//main body
		//predifined class System
		//Something that starts capital in Java is a class, System is a predefined class.
		//out is an object reference from terms of an interview. String class object reference.
		//println is a method that is predefined, method is lowercase started.
		//printf cout print println displays the output like in c, c++, etc.
		//when learning the static keyword we will find out relation between System and out and out with println
		System.out.println("Wassup");
	}//end of main body
}//class body